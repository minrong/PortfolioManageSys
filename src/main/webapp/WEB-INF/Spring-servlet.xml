<?xml version="1.0" encoding="UTF-8"?>

<!-- ApplicationContext的主要实现类是ClassPathXmlApplicationContext和FileSystemXmlApplicationContext,
前者默认从类路径加载配置文件，后者默认从文件系统加载文件。 -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 配置扫描的包 -->
    <!-- 标签是告诉Spring 来扫描指定包下的类,
    并注册被@Component，把普通pojo实例化到spring容器中，@Controller，用于标注控制层。 @Service，用于标注服务层。@Repository，用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件。
    等注解标记的组件。
      -->
    
    <context:component-scan base-package="controller"/>
	
	<!-- declares support for general annotations
	 such as @Required, @Autowired, @PostConstruct, and so on. -->
 	<context:annotation-config/> 
	
    <!-- 注册HandlerMapper、HandlerAdapter两个映射类 -->
    <!--  is actually rather pointless. 
    	It declares explicit support for annotation-driven MVC controllers
    	(i.e.@RequestMapping, @Controller, etc), 
    	even though support for those is the default behaviour -->
    	
    <mvc:annotation-driven/>


	
    <!-- 访问静态资源 -->
    <!-- 若将 DispatcherServlet 请求映射配置为 /，则 Spring MVC 将捕获WEB 容器的所有请求，
    包括静态资源的请求， SpringMVC 会将他们当成一个普通请求处理，因找不到对应处理器将导致错误。
	可以在 SpringMVC 的配置文件中配置 <mvc:default-servlet-handler/> 的方式解决静态资源的问题：
	– <mvc:default-servlet-handler/> 将在 SpringMVC 上下文中定义一个DefaultServletHttpRequestHandler，
	它会对进入 DispatcherServlet 的请求进行筛查，如果发现是没有经过映射的请求，
	就将该请求交由 WEB 应用服务器默认的 Servlet 处理，如果不是静态资源的请求，才由DispatcherServlet 继续处理 -->
    <mvc:default-servlet-handler />
    
    
    <!-- SpringMVC是一个基于DispatcherServlet的MVC框架，
    每一个请求最先访问的都是DispatcherServlet，DispatcherServlet负责转发每一个Request请求给相应的Handler，
    Handler处理以后再返回相应的视图(View)和模型(Model)，返回的视图和模型都可以不指定，
    即可以只返回Model或只返回View或都不返回。 -->
    <!-- 视图解析器 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    
	
    

    
    
</beans>